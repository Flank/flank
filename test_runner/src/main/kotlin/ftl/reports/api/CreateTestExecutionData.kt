package ftl.reports.api

import com.google.api.services.testing.model.TestExecution
import com.google.api.services.toolresults.model.ListTestCasesResponse
import com.google.api.services.toolresults.model.Step
import com.google.api.services.toolresults.model.Timestamp
import ftl.gc.GcToolResults
import ftl.reports.api.data.TestExecutionData
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.async
import kotlinx.coroutines.awaitAll
import kotlinx.coroutines.runBlocking

internal fun List<TestExecution>.createTestExecutionDataListAsync(): List<TestExecutionData> = runBlocking {
    map { testExecution ->
        async(Dispatchers.IO) {
            // calling this function in async block, speeds up execution because
            // it is making api calls under the hood
            testExecution.createTestExecutionData()
        }
    }.awaitAll()
}

private fun TestExecution.createTestExecutionData(): TestExecutionData {
    val response: ListTestCasesResponse = GcToolResults.listTestCases(toolResultsStep)
    val step: Step = GcToolResults.getStepResult(toolResultsStep)
    return TestExecutionData(
        testExecution = this,
        testCases = response.testCases,
        step = step,
        timestamp = response.getStartTimestamp()
    )
}

// Unfortunately is not possible to obtain from api exact the same timestamp as is in autogenerated test_result_1.xml from google cloud.
// This one is a little bit lower but close as possible. The difference is around ~3 seconds.
private fun ListTestCasesResponse.getStartTimestamp(): Timestamp = testCases.minBy { testCase ->
    testCase.startTime.asUnixTimestamp()
}!!.startTime
