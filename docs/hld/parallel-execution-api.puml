@startuml
package "Parallel" {

class Context
class Task<R>
class "Task.Signature" as Task_Signature<R>
class "Task.Body" as Task_Body<X>
interface ExecuteTask<R>
interface Type <T>
interface ParallelState
interface Output

}

Output "0..1" ..o "1" Context
ParallelState "1" --o "1" Context
Type <|-- Context

Type "1" --* "1" Task_Signature
Type "*" --o "1" Task_Signature
Task_Signature "1" --* "*" Task

Task_Body "1" ..> "*" ExecuteTask
ExecuteTask "1" --* "1" Task

@enduml

@startuml
'left to right direction
package "parallel" {

object "Task.Body.invoke" as Task_Body

class Task<R>
class "Task.Signature" as Task_Signature<R>
class ParallelStateFlow
interface Type<R>
interface ExecuteTask<R>
interface ParallelState

'package "Factory" {
object "using" as usingType
object "using" as usingSignature
object from
usingSignature -right- usingType
usingType -right- from
'}
object "invoke" as invokeExecution {
execute tasks
}
object "invoke" as reduce {
reduce tasks
}

Task_Body ..> ExecuteTask

ExecuteTask <-- usingSignature
usingSignature --# Task_Signature
usingSignature ..> Task
usingSignature --* usingType

Type #-- usingType
ExecuteTask <-- usingType
usingType ..> Task

Type <-- from
Type #-- from
from ..> Task_Signature
from -* usingType

reduce <- Task
reduce .> Task

Task --> invokeExecution
invokeExecution <- ParallelState
invokeExecution ..> ParallelStateFlow

}
@enduml
