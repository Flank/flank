/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.testing.model;

/**
 * A test of an iOS application that implements one or more game loop scenarios. This test type
 * accepts an archived application (.ipa file) and a list of integer scenarios that will be executed
 * on the app sequentially.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Testing API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class IosTestLoop extends com.google.api.client.json.GenericJson {

  /**
   * Output only. The bundle id for the application under test.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String appBundleId;

  /**
   * Required. The .ipa of the application to test.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private FileReference appIpa;

  /**
   * The list of scenarios that should be run during the test. Defaults to the single scenario 0 if
   * unspecified.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> scenarios;

  /**
   * Output only. The bundle id for the application under test.
   * @return value or {@code null} for none
   */
  public java.lang.String getAppBundleId() {
    return appBundleId;
  }

  /**
   * Output only. The bundle id for the application under test.
   * @param appBundleId appBundleId or {@code null} for none
   */
  public IosTestLoop setAppBundleId(java.lang.String appBundleId) {
    this.appBundleId = appBundleId;
    return this;
  }

  /**
   * Required. The .ipa of the application to test.
   * @return value or {@code null} for none
   */
  public FileReference getAppIpa() {
    return appIpa;
  }

  /**
   * Required. The .ipa of the application to test.
   * @param appIpa appIpa or {@code null} for none
   */
  public IosTestLoop setAppIpa(FileReference appIpa) {
    this.appIpa = appIpa;
    return this;
  }

  /**
   * The list of scenarios that should be run during the test. Defaults to the single scenario 0 if
   * unspecified.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getScenarios() {
    return scenarios;
  }

  /**
   * The list of scenarios that should be run during the test. Defaults to the single scenario 0 if
   * unspecified.
   * @param scenarios scenarios or {@code null} for none
   */
  public IosTestLoop setScenarios(java.util.List<java.lang.Integer> scenarios) {
    this.scenarios = scenarios;
    return this;
  }

  @Override
  public IosTestLoop set(String fieldName, Object value) {
    return (IosTestLoop) super.set(fieldName, value);
  }

  @Override
  public IosTestLoop clone() {
    return (IosTestLoop) super.clone();
  }

}
