name: "[Release] Step 3: Deploy (Autorun)"

# Run when push on master or create tag with version [v*] for only changes to the test_runner/**
on:
  workflow_dispatch:
  push:
    paths:
      - 'test_runner/**'
      - 'firebase_api/test_api/**'
    branches:
      - 'master'
    tags: v*

# TODO: update workflow permissions to least privilege after auditing all the APIs used
# permissions:  # limit the permissions of the GITHIUB_TOKEN to reading repository contents
#   contents: read

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - name: Harden Runner
      uses: step-security/harden-runner@v2
      with:
        egress-policy: audit
        # TODO: change to 'egress-policy: block' after auditing a number of runs and updating the allowed-endpoints option accordingly

    - uses: actions/checkout@v4
    - uses: gradle/wrapper-validation-action@v3

    - name: Get all git tags
      run: |
        git fetch --prune --unshallow --tags -f
        git tag

    - name: Download flankScripts and add it to PATH
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        ./gradlew :flank-scripts:download
        echo "./flank-scripts/bash" >> $GITHUB_PATH

    - name: Set env variables
      run: |
        echo "MVN_REVISION=$(echo $GITHUB_SHA)" >> $GITHUB_ENV

          if [[ $GITHUB_REF == refs/tags/* ]]
            then
              echo "MVN_VERSION=$(echo ${GITHUB_REF:11})" >> $GITHUB_ENV
              echo "RELEASE_TAG=$(echo ${GITHUB_REF:10})" >> $GITHUB_ENV
            else
              echo "RELEASE_TAG=flank-snapshot" >> $GITHUB_ENV
              echo "MVN_VERSION=master-SNAPSHOT" >> $GITHUB_ENV
          fi;

    - name: Store version variables to file
      run: |
          echo "$GITHUB_SHA" > ./test_runner/src/main/resources/revision.txt
          echo "$RELEASE_TAG" > ./test_runner/src/main/resources/version.txt

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4

    - name: Gradle Build Flank
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        HEAD_REF: ${{ github.head_ref }}
      run: ./gradlew clean test_runner:build test_runner:shadowJar

    - name: Delete old release
      run: |
        gh --version
        flankScripts github delete_release --git-tag=$RELEASE_TAG

    - name: Delete old tag
      if: ${{ env.RELEASE_TAG == 'flank-snapshot' }}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: flankScripts github delete_old_tag --git-tag=$RELEASE_TAG --username=$GITHUB_ACTOR --token="$GH_TOKEN"

    - name: Release snapshot
      if: ${{ env.RELEASE_TAG == 'flank-snapshot' }}
      run: flankScripts github make_release --input-file=./test_runner/build/libs/flank.jar --git-tag=$RELEASE_TAG --commit-hash=$GITHUB_SHA --snapshot

    - name: Release stable
      if: startsWith(github.ref, 'refs/tags/v')
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: flankScripts github make_release --input-file=./test_runner/build/libs/flank.jar --git-tag=$RELEASE_TAG --token="$GH_TOKEN"

    - name: Append checksum to release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        sha256sum ./test_runner/build/libs/flank.jar > flank.sha256
        gh release upload $RELEASE_TAG flank.sha256

    - name: Gradle Upload to MavenCentral
      env:
        PGP_SIGNING_KEY: ${{ secrets.PGP_SIGNING_KEY }}
        MVN_CENTRAL_USER: ${{ secrets.MVN_CENTRAL_USER }}
        PMVN_CENTRAL_PASSWORD: ${{ secrets.MVN_CENTRAL_PASSWORD }}
      run: ./gradlew :test_runner:publishMavenJavaPublicationToMavenCentralRepository -PMVN_CENTRAL_USER="$MVN_CENTRAL_USER" -PMVN_CENTRAL_PASSWORD="$MVN_CENTRAL_PASSWORD"

    - name: Gradle close staging on MavenCentral
      if: startsWith(github.ref, 'refs/tags/v')
      env: 
        MVN_CENTRAL_USER: ${{ secrets.MVN_CENTRAL_USER }}
        MVN_CENTRAL_PASSWORD: ${{ secrets.MVN_CENTRAL_PASSWORD }}
      run: ./gradlew closeAndReleaseRepository -PMVN_CENTRAL_USER="$MVN_CENTRAL_USER" -PMVN_CENTRAL_PASSWORD="$MVN_CENTRAL_PASSWORD"

    - name: Gradle Upload to GitHub packages
      if: startsWith(github.ref, 'refs/tags/v')
      env:
        PGP_SIGNING_KEY: ${{ secrets.PGP_SIGNING_KEY }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: ./gradlew :test_runner:publishMavenJavaPublicationToGitHubPackagesRepository -PGITHUB_TOKEN="$GH_TOKEN"
