apply plugin: 'com.android.application'

buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.4'
    }
}

android {
    compileSdkVersion 27

    defaultConfig {
        applicationId "com.example.app"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        animationsDisabled = true
        execution 'ANDROID_TEST_ORCHESTRATOR'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:27.0.2'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'

    def runnerVersion = '1.0.2-alpha1'
    def orchestratorVersion = runnerVersion
    def espressoVersion = '3.0.2-alpha1'

    androidTestUtil "com.android.support.test:orchestrator:$orchestratorVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "com.android.support.test:runner:$runnerVersion"
    testImplementation 'junit:junit:4.12'

}

// Run espresso tests *without* building the APKs.
// Useful for quickly running tests locally when the APKs already exist.
//
// Generates:
// test_app/app/build/outputs/androidTest-results/connected/TEST-*.xml
// test_app/app/build/reports/androidTests/connected/index.html
//
// gradle --configure-on-demand espresso
task espresso {
    doLast {
        def testTask = project.tasks["connectedDebugAndroidTest"]
        def runTestsAction = testTask.getActions().get(0)

        runTestsAction.execute(testTask)
    }
}
